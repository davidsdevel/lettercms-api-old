
  async getStats() {
    try {
      const dateNow = new Date();

      const nowYear = dateNow.getFullYear();
      const nowMonth = dateNow.getMonth();
      const nowDate = dateNow.getDate();

      const limit = new Date(nowYear, nowMonth, nowDate) - (1000 * 60 * 60 * 24 * 30);

      const general = {
        viewsPerDay: {},
        hours: {
          '1AM': 0,
          '2AM': 0,
          '3AM': 0,
          '4AM': 0,
          '5AM': 0,
          '6AM': 0,
          '7AM': 0,
          '8AM': 0,
          '9AM': 0,
          '10AM': 0,
          '11AM': 0,
          '12M': 0,
          '1PM': 0,
          '2PM': 0,
          '3PM': 0,
          '4PM': 0,
          '5PM': 0,
          '6PM': 0,
          '7PM': 0,
          '8PM': 0,
          '9PM': 0,
          '10PM': 0,
          '11PM': 0,
          '12AM': 0,
        },
        days: {
          Domingo: 0,
          Lunes: 0,
          Martes: 0,
          Miércoles: 0,
          Jueves: 0,
          Viernes: 0,
          Sábado: 0,
        },
        locations: {},
        os: {},
        browsers: {},
        origins: {},
        subscriptors: 0,
      };

      const views = await this.db('views').select('*');

      if (views.length === 0) { return Promise.resolve({}); }

      const posts = await this.db('posts').where({ postStatus: 'published' }).select('views', 'images', 'comments', 'url', 'title', 'tags', 'description');
      const users = await this.db('users').select('email');

      // Set default day views values

      for (let i = 29; i >= 0; i -= 1) {
        const time = new Date(dateNow - (i * 1000 * 60 * 60 * 24));
        const month = time.getMonth() + 1;
        const date = time.getDate();

        const path = `${date < 10 ? `0${date}` : date}-${month < 10 ? `0${month}` : month}`;

        general.viewsPerDay[path] = 0;
      }

      views.forEach(({
        time, referer, os, browser, country,
      }) => {
        const urlRegExp = /https?:\/\/(\w*\.)*\w*/;

        const timeData = new Date(time);

        // Set Views Per Day
        if (timeData > limit) {
          const month = timeData.getMonth() + 1;
          const date = timeData.getDate();

          const path = `${date < 10 ? `0${date}` : date}-${month < 10 ? `0${month}` : month}`;

          const generalViews = general.viewsPerDay[path];

          if (!generalViews) {
            general.viewsPerDay[path] = 1;
          } else {
            general.viewsPerDay[path] = generalViews + 1;
          }
        }

        // Set General Time Views

        let hour = timeData.getHours();

        if (hour < 12) {
          hour = `${hour}AM`;
        } else if (hour === 12) {
          hour = `${hour}M`;
        } else if (hour > 12) {
          hour = `${hour - 12}PM`;
        } else if (hour === 0) {
          hour = '12AM';
        }

        const origin = urlRegExp.test(referer) ? referer.match(urlRegExp)[0] : 'desconocido';

        const dayIndex = timeData.getDay();

        let day;

        switch (dayIndex) {
          case 0:
            day = 'Domingo';
            break;
          case 1:
            day = 'Lunes';
            break;
          case 2:
            day = 'Martes';
            break;
          case 3:
            day = 'Miercoles';
            break;
          case 4:
            day = 'Jueves';
            break;
          case 5:
            day = 'Viernes';
            break;
          case 6:
            day = 'Sábado';
            break;
          default: break;
        }

        const generalHour = general.hours[hour];
        const generalLocation = general.locations[country];
        const generalOS = general.os[os];
        const generalOrigin = general.origins[referer];
        const generalBrowser = general.browsers[browser];
        const generalDay = general.days[day];

        if (!generalHour) {
          general.hours[hour] = 1;
        } else {
          general.hours[hour] = generalHour + 1;
        }

        // Set General Location Views

        if (!generalLocation) {
          general.locations[country] = 1;
        } else {
          general.locations[country] = generalLocation + 1;
        }

        // Set General OS Views

        if (!generalOS) {
          general.os[os] = 1;
        } else {
          general.os[os] = generalOS + 1;
        }

        if (!generalBrowser) {
          general.browsers[browser] = 1;
        } else {
          general.browsers[browser] = generalBrowser + 1;
        }

        // Set General Origin Views

        if (!generalOrigin) {
          general.origins[origin] = 1;
        } else {
          general.origins[origin] = generalOrigin + 1;
        }

        // Set General Day Views
        if (!generalDay) {
          general.days[day] = 1;
        } else {
          general.days[day] = generalDay + 1;
        }
      });
      users.forEach(({ email }) => {
        const { subscriptors } = general;

        if (email) { general.subscriptors = subscriptors + 1; }
      });

      const mostView = await this.getMostViewed();
      const mostCommented = await this.getMostCommented();

      return Promise.resolve({
        general,
        posts,
        mostView,
        mostCommented,
      });
    } catch (err) {
      return Promise.reject(err);
    }
  }